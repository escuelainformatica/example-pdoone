<?php
/** @noinspection PhpIncompatibleReturnTypeInspection
 * @noinspection ReturnTypeCanBeDeclaredInspection
 * @noinspection DuplicatedCode
 * @noinspection PhpUnused
 * @noinspection PhpUndefinedMethodInspection
 * @noinspection PhpUnusedLocalVariableInspection
 * @noinspection PhpUnusedAliasInspection
 * @noinspection NullPointerExceptionInspection
 * @noinspection SenselessProxyMethodInspection
 * @noinspection PhpParameterByRefIsNotUsedAsReferenceInspection
 */
namespace example\model;
use eftec\PdoOne;
use Exception;

/**
 * Generated by PdoOne Version 2.2.5 Date generated Sun, 06 Sep 2020 17:11:20 -0400. 
 * DO NOT EDIT THIS CODE. THIS CODE WILL SELF GENERATE.
 * @copyright (c) Jorge Castro C. MIT License  https://github.com/EFTEC/PdoOne
 * Class Customer
 * <pre>
 * $code=$pdoOne->generateAbstractModelClass({args});
 * </pre>
 */
abstract class AbstractCustomer
{
	/** @var int $IdCustomer  */
	public $IdCustomer;
	/** @var string $Name  */
	public $Name;

	/** @var Invoice[] $_invoices onetomany */
    public $_invoices;


    /**
     * AbstractCustomer constructor.
     *
     * @param array|null $array
     */
    public function __construct($array=null)
    {
        if($array===null) {
            return;
        }
        foreach($array as $k=>$v) {
            $this->{$k}=$v;
        }
    }

    //<editor-fold desc="array conversion">
    public static function fromArray($array) {
        if($array===null) {
            return null;
        }
        $obj=new Customer();
		$obj->IdCustomer=isset($array['IdCustomer']) ?  $array['IdCustomer'] : null;
		$obj->Name=isset($array['Name']) ?  $array['Name'] : null;
		$obj->_invoices=isset($array['_invoices']) ?  
            $obj->_invoices=Invoice::fromArrayMultiple($array['_invoices']) 
            : null; // onetomany

        return $obj;
    }
    
    /**
     * It converts the current object in an array
     * 
     * @return mixed
     */
    public function toArray() {
        return static::objectToArray($this);
    }
    
    /**
     * It converts an array of arrays into an array of objects.
     * 
     * @param array|null $array
     *
     * @return array|null
     */
    public static function fromArrayMultiple($array) {
        if($array===null) {
            return null;
        }
        $objs=[];
        foreach($array as $v) {
            $objs[]=self::fromArray($v);
        }
        return $objs;
    }
    //</editor-fold>
    
} // end class